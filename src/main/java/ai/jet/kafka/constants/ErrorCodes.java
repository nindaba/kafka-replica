package ai.jet.kafka.constants;

public interface ErrorCodes {
     short UNKNOWN_SERVER_ERROR = -1;                    //	False	The server experienced an unexpected error when processing the request.
     short NONE = 0;                                    //	  False
     short OFFSET_OUT_OF_RANGE = 1;                        //	False	The requested offset is not within the range of offsets maintained by the server.
     short CORRUPT_MESSAGE = 2;                            //	True	This message has failed its CRC checksum, exceeds the valid size, has a null key for a compacted topic, or is otherwise corrupt.
     short UNKNOWN_TOPIC_OR_PARTITION = 3;                //	True	This server does not host this topic-partition.
     short INVALID_FETCH_SIZE = 4;                        //	False	The requested fetch size is invalid.
     short LEADER_NOT_AVAILABLE = 5;                    //	True	There is no leader for this topic-partition as we are in the middle of a leadership election.
     short NOT_LEADER_OR_FOLLOWER = 6;                //	True	For requests intended only for the leader, this error indicates that the broker is not the current leader. For requests intended for any replica, this error indicates that the broker is not a replica of the topic partition.
     short REQUEST_TIMED_OUT = 7;                //	True	The request timed out.
     short BROKER_NOT_AVAILABLE = 8;                //	False	The broker is not available.
     short REPLICA_NOT_AVAILABLE = 9;                //	True	The replica is not available for the requested topic-partition. Produce/Fetch requests and other requests intended only for the leader or follower return NOT_LEADER_OR_FOLLOWER if the broker is not a replica of the topic-partition.
     short MESSAGE_TOO_LARGE = 10;                //	False	The request included a message larger than the max message size the server will accept.
     short STALE_CONTROLLER_EPOCH = 11;                //	False	The controller moved to another broker.
     short OFFSET_METADATA_TOO_LARGE = 12;                //	False	The metadata field of the offset request was too large.
     short NETWORK_EXCEPTION = 13;                //	True	The server disconnected before a response was received.
     short COORDINATOR_LOAD_IN_PROGRESS = 14;                //	True	The coordinator is loading and hence can't process requests.
     short COORDINATOR_NOT_AVAILABLE = 15;                //	True	The coordinator is not available.
     short NOT_COORDINATOR = 16;                //	True	This is not the correct coordinator.
     short INVALID_TOPIC_EXCEPTION = 17;                //	False	The request attempted to perform an operation on an invalid topic.
     short RECORD_LIST_TOO_LARGE = 18;                //	False	The request included message batch larger than the configured segment size on the server.
     short NOT_ENOUGH_REPLICAS = 19;                //	True	Messages are rejected since there are fewer in-sync replicas than required.
     short NOT_ENOUGH_REPLICAS_AFTER_APPEND = 20;                //	True	Messages are written to the log, but to fewer in-sync replicas than required.
     short INVALID_REQUIRED_ACKS = 21;                //	False	Produce request specified an invalid value for required acks.
     short ILLEGAL_GENERATION = 22;                //	False	Specified group generation id is not valid.
     short INCONSISTENT_GROUP_PROTOCOL = 23;                //	False	The group member's supported protocols are incompatible with those of existing members or first group member tried to join with empty protocol type or empty protocol list.
     short INVALID_GROUP_ID = 24;                //	False	The configured groupId is invalid.
     short UNKNOWN_MEMBER_ID = 25;                //	False	The coordinator is not aware of this member.
     short INVALID_SESSION_TIMEOUT = 26;                //	False	The session timeout is not within the range allowed by the broker (as configured by group.min.session.timeout.ms and group.max.session.timeout.ms).
     short REBALANCE_IN_PROGRESS = 27;                //	False	The group is rebalancing, so a rejoin is needed.
     short INVALID_COMMIT_OFFSET_SIZE = 28;                //	False	The committing offset data size is not valid.
     short TOPIC_AUTHORIZATION_FAILED = 29;                //	False	Topic authorization failed.
     short GROUP_AUTHORIZATION_FAILED = 30;                //	False	Group authorization failed.
     short CLUSTER_AUTHORIZATION_FAILED = 31;                //	False	Cluster authorization failed.
     short INVALID_TIMESTAMP = 32;                //	False	The timestamp of the message is out of acceptable range.
     short UNSUPPORTED_SASL_MECHANISM = 33;                //	False	The broker does not support the requested SASL mechanism.
     short ILLEGAL_SASL_STATE = 34;                //	False	Request is not valid given the current SASL state.
     short UNSUPPORTED_VERSION = 35;                //	False	The version of API is not supported.
     short TOPIC_ALREADY_EXISTS = 36;                //	False	Topic with this name already exists.
     short INVALID_PARTITIONS = 37;                //	False	Number of partitions is below 1.
     short INVALID_REPLICATION_FACTOR = 38;                //	False	Replication factor is below 1 or larger than the number of available brokers.
     short INVALID_REPLICA_ASSIGNMENT = 39;                //	False	Replica assignment is invalid.
     short INVALID_CONFIG = 40;                //	False	Configuration is invalid.
     short NOT_CONTROLLER = 41;                //	True	This is not the correct controller for this cluster.
     short INVALID_REQUEST = 42;                //	False	This most likely occurs because of a request being malformed by the client library or the message was sent to an incompatible broker. See the broker logs for more details.
     short UNSUPPORTED_FOR_MESSAGE_FORMAT = 43;                //	False	The message format version on the broker does not support the request.
     short POLICY_VIOLATION = 44;                //	False	Request parameters do not satisfy the configured policy.
     short OUT_OF_ORDER_SEQUENCE_NUMBER = 45;                //	False	The broker received an out of order sequence number.
     short DUPLICATE_SEQUENCE_NUMBER = 46;                //	False	The broker received a duplicate sequence number.
     short INVALID_PRODUCER_EPOCH = 47;                //	False	Producer attempted to produce with an old epoch.
     short INVALID_TXN_STATE = 48;                //	False	The producer attempted a transactional operation in an invalid state.
     short INVALID_PRODUCER_ID_MAPPING = 49;                //	False	The producer attempted to use a producer id which is not currently assigned to its transactional id.
     short INVALID_TRANSACTION_TIMEOUT = 50;                //	False	The transaction timeout is larger than the maximum value allowed by the broker (as configured by transaction.max.timeout.ms).
     short CONCURRENT_TRANSACTIONS = 51;                //	True	The producer attempted to update a transaction while another concurrent operation on the same transaction was ongoing.
     short TRANSACTION_COORDINATOR_FENCED = 52;                //	False	Indicates that the transaction coordinator sending a WriteTxnMarker is no longer the current coordinator for a given producer.
     short TRANSACTIONAL_ID_AUTHORIZATION_FAILED = 53;                //	False	Transactional Id authorization failed.
     short SECURITY_DISABLED = 54;                //	False	Security features are disabled.
     short OPERATION_NOT_ATTEMPTED = 55;                //	False	The broker did not attempt to execute this operation. This may happen for batched RPCs where some operations in the batch failed, causing the broker to respond without trying the rest.
     short KAFKA_STORAGE_ERROR = 56;                //	True	Disk error when trying to access log file on the disk.
     short LOG_DIR_NOT_FOUND = 57;                //	False	The user-specified log directory is not found in the broker config.
     short SASL_AUTHENTICATION_FAILED = 58;                //	False	SASL Authentication failed.
     short UNKNOWN_PRODUCER_ID = 59;                //	False	This exception is raised by the broker if it could not locate the producer metadata associated with the producerId in question. This could happen if, for instance, the producer's records were deleted because their retention time had elapsed. Once the last records of the producerId are removed, the producer's metadata is removed from the broker, and future appends by the producer will return this exception.
     short REASSIGNMENT_IN_PROGRESS = 60;                //	False	A partition reassignment is in progress.
     short DELEGATION_TOKEN_AUTH_DISABLED = 61;                //	False	Delegation Token feature is not enabled.
     short DELEGATION_TOKEN_NOT_FOUND = 62;                //	False	Delegation Token is not found on server.
     short DELEGATION_TOKEN_OWNER_MISMATCH = 63;                //	False	Specified Principal is not valid Owner/Renewer.
     short DELEGATION_TOKEN_REQUEST_NOT_ALLOWED = 64;                //	False	Delegation Token requests are not allowed on PLAINTEXT/1-way SSL channels and on delegation token authenticated channels.
     short DELEGATION_TOKEN_AUTHORIZATION_FAILED = 65;                //	False	Delegation Token authorization failed.
     short DELEGATION_TOKEN_EXPIRED = 66;                //	False	Delegation Token is expired.
     short INVALID_PRINCIPAL_TYPE = 67;                //	False	Supplied principalType is not supported.
     short NON_EMPTY_GROUP = 68;                //	False	The group is not empty.
     short GROUP_ID_NOT_FOUND = 69;                //	False	The group id does not exist.
     short FETCH_SESSION_ID_NOT_FOUND = 70;                //	True	The fetch session ID was not found.
     short INVALID_FETCH_SESSION_EPOCH = 71;                //	True	The fetch session epoch is invalid.
     short LISTENER_NOT_FOUND = 72;                //	True	There is no listener on the leader broker that matches the listener on which metadata request was processed.
     short TOPIC_DELETION_DISABLED = 73;                //	False	Topic deletion is disabled.
     short FENCED_LEADER_EPOCH = 74;                //	True	The leader epoch in the request is older than the epoch on the broker.
     short UNKNOWN_LEADER_EPOCH = 75;                //	True	The leader epoch in the request is newer than the epoch on the broker.
     short UNSUPPORTED_COMPRESSION_TYPE = 76;                //	False	The requesting client does not support the compression type of given partition.
     short STALE_BROKER_EPOCH = 77;                //	False	Broker epoch has changed.
     short OFFSET_NOT_AVAILABLE = 78;                //	True	The leader high watermark has not caught up from a recent leader election so the offsets cannot be guaranteed to be monotonically increasing.
     short MEMBER_ID_REQUIRED = 79;                //	False	The group member needs to have a valid member id before actually entering a consumer group.
     short PREFERRED_LEADER_NOT_AVAILABLE = 80;                //	True	The preferred leader was not available.
     short GROUP_MAX_SIZE_REACHED = 81;                //	False	The consumer group has reached its max size.
     short FENCED_INSTANCE_ID = 82;                //	False	The broker rejected this  consumer since another consumer with the same group.instance.id has registered with a different member.id.
     short ELIGIBLE_LEADERS_NOT_AVAILABLE = 83;                //	True	Eligible topic partition leaders are not available.
     short ELECTION_NOT_NEEDED = 84;                //	True	Leader election not needed for topic partition.
     short NO_REASSIGNMENT_IN_PROGRESS = 85;                //	False	No partition reassignment is in progress.
     short GROUP_SUBSCRIBED_TO_TOPIC = 86;                //	False	Deleting offsets of a topic is forbidden while the consumer group is actively subscribed to it.
     short INVALID_RECORD = 87;                //	False	This record has failed the validation on broker and hence will be rejected.
     short UNSTABLE_OFFSET_COMMIT = 88;                //	True	There are unstable offsets that need to be cleared.
     short THROTTLING_QUOTA_EXCEEDED = 89;                //	True	The throttling quota has been exceeded.
     short PRODUCER_FENCED = 90;                //	False	There is a newer producer with the same transactionalId which fences the current one.
     short RESOURCE_NOT_FOUND = 91;                //	False	A request illegally referred to a resource that does not exist.
     short DUPLICATE_RESOURCE = 92;                //	False	A request illegally referred to the same resource twice.
     short UNACCEPTABLE_CREDENTIAL = 93;                //	False	Requested credential would not meet criteria for acceptability.
     short INCONSISTENT_VOTER_SET = 94;                //	False	Indicates that the either the sender or recipient of a voter-only request is not one of the expected voters.
     short INVALID_UPDATE_VERSION = 95;                //	False	The given update version was invalid.
     short FEATURE_UPDATE_FAILED = 96;                //	False	Unable to update finalized features due to an unexpected server error.
     short PRINCIPAL_DESERIALIZATION_FAILURE = 97;                //	False	Request principal deserialization failed during forwarding. This indicates an internal error on the broker cluster security setup.
     short SNAPSHOT_NOT_FOUND = 98;                //	False	Requested snapshot was not found.
     short POSITION_OUT_OF_RANGE = 99;                //	False	Requested position is not greater than or equal to zero, and less than the size of the snapshot.
     short UNKNOWN_TOPIC_ID = 100;                //	True	This server does not host this topic ID.
     short DUPLICATE_BROKER_REGISTRATION = 101;                //	False	This broker ID is already in use.
     short BROKER_ID_NOT_REGISTERED = 102;                //	False	The given broker ID was not registered.
     short INCONSISTENT_TOPIC_ID = 103;                //	True	The log's topic ID did not match the topic ID in the request.
     short INCONSISTENT_CLUSTER_ID = 104;                //	False	The clusterId in the request does not match that found on the server.
     short TRANSACTIONAL_ID_NOT_FOUND = 105;                //	False	The transactionalId could not be found.
     short FETCH_SESSION_TOPIC_ID_ERROR = 106;                //	True	The fetch session encountered inconsistent topic ID usage.
     short INELIGIBLE_REPLICA = 107;                //	False	The new ISR contains at least one ineligible replica.
     short NEW_LEADER_ELECTED = 108;                //	False	The AlterPartition request successfully updated the partition state but the leader has changed.
     short OFFSET_MOVED_TO_TIERED_STORAGE = 109;                //	False	The requested offset is moved to tiered storage.
     short FENCED_MEMBER_EPOCH = 110;                //	False	The member epoch is fenced by the group coordinator. The member must abandon all its partitions and rejoin.
     short UNRELEASED_INSTANCE_ID = 111;                //	False	The instance ID is still used by another member in the consumer group. That member must leave first.
     short UNSUPPORTED_ASSIGNOR = 112;                //	False	The assignor or its version range is not supported by the consumer group.
     short STALE_MEMBER_EPOCH = 113;                //	False	The member epoch is stale. The member must retry after receiving its updated member epoch via the ConsumerGroupHeartbeat API.
     short MISMATCHED_ENDPOINT_TYPE = 114;                //	False	The request was sent to an endpoint of the wrong type.
     short UNSUPPORTED_ENDPOINT_TYPE = 115;                //	False	This endpoint type is not supported yet.
     short UNKNOWN_CONTROLLER_ID = 116;                //	False	This controller ID is not known.
     short UNKNOWN_SUBSCRIPTION_ID = 117;                //	False	Client sent a push telemetry request with an invalid or outdated subscription ID.
     short TELEMETRY_TOO_LARGE = 118;                //	False	Client sent a push telemetry request larger than the maximum size the broker will accept.
     short INVALID_REGISTRATION = 119;                //	False	The controller has considered the broker registration to be invalid.
     short TRANSACTION_ABORTABLE = 120;                //	False	The server encountered an error with the transaction. The client can abort the transaction to continue using this transactional ID.
     short INVALID_RECORD_STATE = 121;                //	False	The record state is invalid. The acknowledgement of delivery could not be completed.
     short SHARE_SESSION_NOT_FOUND = 122;                //	True	The share session was not found.
     short INVALID_SHARE_SESSION_EPOCH = 123;                //	True	The share session epoch is invalid.
     short FENCED_STATE_EPOCH = 124;                //	False	The share coordinator rejected the request because the share-group state epoch did not match.
     short INVALID_VOTER_KEY = 125;                //	False	The voter key doesn't match the receiving replica's key.
     short DUPLICATE_VOTER = 126;                //	False	The voter is already part of the set of voters.
     short VOTER_NOT_FOUND = 127;                //	False	The voter is not part of the set of voters.
}
